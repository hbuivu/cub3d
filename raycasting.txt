1 unit = 1 pixel 
1 cube = 64 x 64 pixels (x64 in 3d)

1. convert player_pos to unit coordinates 
player_pos = (col, row)
new_player_posx = col * cube_size + (.5)(cub_size);
new_player_posy = row * cube_size + (.5)(cub_size);

2. Direction vector
convert in download function the player_dir to an int *vector
N = (0, -1)
S = (0, 1)
E = (1, 0)
W = (-1, 0)
In map2.cub, we are facing south
double dirX = 0
double dirY = 1

3. Set up camera plane. Must be perpendicular to direction
double planeX = 0.66;
double planeY = 0;

4. create screen with width w and height half

5. calculate ray position and Direction
int x = 0;
while (x < w)
{
	//get x position in camera space. coordinate 0 is -1, middle of window is 0, last coordinate is 1
	double cameraX = 2 * x / (double)w - 1; 
	//vector components of the ray
	double rayDirX = dirX + planeX * cameraX;
	double rayDirY = dirY = planeY * cameraX
	x++;
}

6. Calculate how much ray travels by each square
double deltaDistX = sqrt(1 + (ray_DirY * rayDirY)/(rayDirX * rayDirX))
double deltaDistY = sqrt((rayDirX * rayDirX)/(rayDirY * rayDirY) + 1)
-deltaDistX is how much the ray moves through one unit of x (one column to the next column)
x component is 1 (rayDirX / rayDirX)
y component is rayDirY / rayDirX
-deltaDistY is how much the ray moves through one unit of y (one row to the next row)
x component is rayDirX / rayDirY
y componnet is rayDirY / ray_DirY

deltaDistX can also be abs(|rayDir|/rayDirX)
deltaDistY can also be abs(|rayDir|/rayDirY)
	the length of the total ray divided by the x/y direction vector of the ray
	absolute value because we are finding the length with no direction
-this can further be simplified to 
	abs(1 / rayDirX) and abs(1 / rayDirY)
	this is because we are looking for the ratios between delta X and delta Y
	since the top number is the same (|rayDir|), we can change it to 1

if (rayDirX = 0)
	return 0
else
	DeltaDistX = abs(1 / rayDirX);
if (rayDirY = 0)
	return 0
else
	DeltaDistX = abs(1 / rayDirY);

7. find length of ray from current position to next x or y simplified
if the x component of ray is in neg direction

if (rayDirX < 0)
	stepX = -1;
	double sideDistX = (posX - mapX) * deltDistX;
else
	stepX = 1;
	sideDistX = (mapX + 1.0 - posX) * deltaDistY;
double sideDistY


