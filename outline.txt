1. Check argv/argc for correct number of arguments
2. Check argv[1] for .cub ending
3. open .cub file -> if can't be opened return
4. calloc main struct
5. download map into initial linked list (omap = original map)
6. parse beginning elements
	-check that labels are correct (ex: NO not NORTH or no);
	-check that there are no duplicates (if element in main struct !NULL when you try to access, then it's an error)
	-for textures, add string containing just the path to main struct
		-check that string ends in correct ending (.xpm)
	-for F and C, create an int *array of 3 nums and add to main struct
		-check that ints are between 0 and 255
	-return a pointer to the node that contains the first row of the actual map in the linked list
		-ft_strchr 1 or 0 (only check for this after checking for all other element conditions ->see in identify func)
7. check the elements in the main struct to make sure none of them are NULL. Else map is invalid
8. parse map
	-use pointer from step 6
	-1st iteration through map
		-obtain map_height and map_width(width of largest row)
		-Find player
			-player_pos (int *array of column and row)
			-player_dir (char NSEW)
				if player_dir !NULL in main, return error
		-if any chars that are not " NSEW01", return error
		-if there are any empty lines, return error
	-create a 2d char array (possibly a linked list if we want to use floodfill to check map)
		-copy over string, and if any leftover space, copy over space (except for last element which should be NULL)
		-based on the way the string was copied (top to bottom), the graph will look like this
			0-------------> x+
			|
			|
			|
			v
			y+
				 
			  (0, -1)
				 N 
				 ^
			     |
	(-1, 0)	W <--0--> E (1, 0)
				 |
				 v
				 S 
			   (0, 1)

	-check for presence of player
	-check that map exists
9. Free omap - we don't need it anymore (??)
10. Use a method (floodfill or the other one that's kind of like floodfill) to check map validity
11. Start drawing??

NOTES:
If any misconfiguration of any kind is encountered in the file, the program
must exit properly and return "Error\n" followed by an explicit error message
of your choice.
--> need to configure error messages later

